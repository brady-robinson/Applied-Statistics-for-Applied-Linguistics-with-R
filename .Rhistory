regression_data <- read.xls(file.choose())
library(gdata)
regression_data <- read.xls(file.choose())
regression_data
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
library(ggplot2)
library(dplyr)
library(ggplot2)
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
regression_model <- lm(study_time ~ speaking_score, data = regression_data)
regression_model$residuals
summery(regression_model)
summary(regression_model)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
summary(regression_model)
regression_model <- lm(study_time ~ speaking_score, data = regression_data)
summary(regression_model)
regression_model
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm)
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm, se = FALSE)
regression_model <- lm(study_time ~ speaking_score, data = regression_data)
summary(regression_model)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model$residuals
ggplot(regression_model, aes(residuals)) + geom_histogram()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram()
regression_data <- regression_data[-c(91)]
regression_data
regression_data <- regression_data[-c(91),]
regression_data
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model
regression_model$residuals
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 15)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 30)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.2)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.4)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.1)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.1) + geom_stat()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.1) + stat_smooth()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.1)
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm, se = FALSE)
library(car)
?durbin.watson
durbinWatsonTest(regression_model)
durbinWatsonTest(regression_model$residuals)
durbinWatsonTest(regression_model)
predict(regression_model)
residual_values <- regression_model$residuals
ggplot(regression_model, aes(predicted_values, residual_values)) + geom_point()
predicted_values <- predict(regression_model)
ggplot(regression_model, aes(predicted_values, residual_values)) + geom_point()
?ppplot
?pplot
qqnorm(regression_model$residuals)
?qqnorm
qqline(regression_model$residuals)
qqplot(regression_model$residuals)
qqPlot(regression_model$residuals)
outlierTest(regression_model)
regression_data <- read.xls(file.choose())
regression_data
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
outlierTest(regression_model)
regression_data <- regression_data[-c(91),]
regression_data
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model
regression_model$residuals
# Load packages
library(gdata)
library(dplyr)
library(reshape2)
library(ggplot2)
library(pastecs)
library(mvnormtest)
library(assertr)
library(stats)
library(heplots)
library(car)
manova_data <- read.xls(file.choose())
manova_data
columns_to_keep <- c("School", "Speaking_Score", "Writing_Score")
manova_data <- manova_data[columns_to_keep]
manova_data
manova_data$School<-factor(manova_data$School, levels = c(1, 2, 3), labels = c("on_site", "online", "hybrid"))
str(manova_data)
# First we need to restructure the data into long format:
manova_data_melt <- melt(manova_data, id=c('School'), measured=c('Speaking_Score', 'Writing_Score'))
names(manova_data_melt) <- c('School', 'Outcome_Measure', 'Score')
# plot
box_plot <- ggplot(manova_data_melt, aes(School, Score, color = Outcome_Measure))
# plot
box_plot <- ggplot(manova_data_melt, aes(School, Score, color = Outcome_Measure))
box_plot + geom_boxplot() + labs(x='School Type', y='Speaking/Writing Scores', color='Outcome_Measure') + scale_y_continuous(breaks=seq(0,100, by=5))
by(manova_data$Speaking_Score, manova_data$School, stat.desc, basic=F)
by(manova_data$Writing_Score, manova_data$School, stat.desc, basic=F)
# Running the MANOVA test
residuals_manova <- manova(cbind(Speaking_Score, Writing_Score) ~ School,
data = manova_data)
summary(residuals_manova, test="Wilks")
# Univariate normality
c1_subset <- subset(manova_data, School == "on_site")
c1_subset
c2_subset <- subset(manova_data, School == "online")
c2_subset
c3_subset <- subset(manova_data, School == "hybrid")
c3_subset
shapiro.test(x = c1_subset$Speaking_Score)
shapiro.test(x = c1_subset$Writing_Score)
shapiro.test(x = c2_subset$Speaking_Score)
shapiro.test(x = c2_subset$Writing_Score)
shapiro.test(x = c3_subset$Speaking_Score)
shapiro.test(x = c3_subset$Writing_Score)
dim(c1_subset)
dim(c2_subset)
dim(c3_subset)
output_boxm <- boxM(manova_data[,2:3], manova_data[,1])
summary(output_boxm)
corr_output <- cor.test(manova_data$Speaking_Score, manova_data$Writing_Score, method = "pearson")
corr_output
ggplot(c1_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
ggplot(c2_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
ggplot(c3_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
cols_for_maha <- c("Speaking_Score", "Writing_Score")
data_for_maha <- manova_data[cols_for_maha]
data_for_maha
sort(maha_dist(data_for_maha))
?sort
means <- colMeans(data_for_maha)
covx <- cov(data_for_maha)
maha_values <- mahalanobis(data_for_maha,means, covx)
sort(maha_values)
output_boxm <- boxM(manova_data[,2:3], manova_data[,1])
summary(output_boxm)
# Levene's test for homogeneirty of variance
leveneTest(manova_data$Speaking_Score, manova_data$School, center = mean)
leveneTest(manova_data$Writing_Score, manova_data$School, center = mean)
by(manova_data$Speaking_Score, manova_data$School, stat.desc, basic=F)
by(manova_data$Writing_Score, manova_data$School, stat.desc, basic=F)
# Running the MANOVA test
residuals_manova <- manova(cbind(Speaking_Score, Writing_Score) ~ School,
data = manova_data)
summary(residuals_manova, test="Wilks")
summary.aov(residuals_manova)
#install.packages("lsr")
library(lsr)
effect_size_speaking <- etaSquared(speaking_model)
speaking_model <- lm(Speaking_Score ~ School, data=manova_data)
writing_model <- lm(Writing_Score ~ School, data=manova_data)
effect_size_speaking <- etaSquared(speaking_model)
effect_size_writing <- etaSquared(writing_model)
effect_size_speaking
effect_size_writing
effect_size_speaking[,1]
effect_size_writing[,1]
tot_eff_size <- (eff_size_1 + eff_size_2)/2
tot_eff_size
tot_eff_size <- ((eff_size_1 + eff_size_2)/2)
eff_size_1 <- effect_size_speaking[,1]
eff_size_2 <- effect_size_writing[,1]
tot_eff_size <- ((eff_size_1 + eff_size_2)/2)
tot_eff_size
summary.aov(manova_model)
manova_model <- manova(bound_outcomes ~ School, data = manova_data)
summary(manova_model, intercept = TRUE) # default Pillai test
summary(manova_model, intercept = TRUE, test = "Wilks")
summary.aov(manova_model)
bound_outcomes <- cbind(manova_data$Speaking_Score, manova_data$Writing_Score)
manova_model <- manova(bound_outcomes ~ School, data = manova_data)
summary(manova_model, intercept = TRUE) # default Pillai test
summary(manova_model, intercept = TRUE, test = "Wilks")
summary.aov(manova_model)
eff_size_1 <- effect_size_speaking[,1]
eff_size_2 <- effect_size_writing[,1]
eff_size_1
eff_size_2
# install.packages("multcomp")
library(multcomp)
post_hocs_speaking <- glht(speaking_model, linfct = mcp(School = "Tukey"))
post_hocs_writing <- glht(writing_model, linfct = mcp(School = "Tukey"))
summary(post_hocs_speaking)
summary(post_hocs_writing)
eff_size_speaking <- effect_size_speaking[,1]
eff_size_writing <- effect_size_writing[,1]
eff_size_writing
eff_size_speaking
eff_size_writing
effect_size_manova <- etaSquared(manova_model)
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
regression_data <- read.xls(file.choose())
regression_data
regression_data
regression_data <- read.xls(file.choose())
regression_data
regression_model <- lm(speaking_score ~ study_time + age + anxiety_level +
study_time + lived_eng, data = regression_data)
summary(regression_model)
durbinWatsonTest(regression_model)
influence(regression_model)
outlierTest(regression_model)
predicted_values <- predict(regression_model)
residual_values <- regression_model$residuals
ggplot(regression_model, aes(predicted_values, residual_values)) + geom_point()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram()
qqPlot(regression_model$residuals)
install.packages("MASS")
install.packages("MASS")
library(MASS)
sresid <- studres(regression_model)
sresid
predicted_values <- predict(regression_model)
predicted_values
regression_data
ggplot(aes(sresid, predicted_values)) + geom_point()
ggplot(data = FALSE, aes(sresid, predicted_values)) + geom_point()
frame_for_plot <- cbind(sresid, predicted_values)
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
frame_for_plot <- as.data.frame(cbind(sresid, predicted_values))
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
frame_for_plot
sresid
predicted_values
avPlot(regression_model)
regression_data
avPlot(regression_model, variable = "anxiety_level")
avPlot(regression_model, variable = "age")
avPlot(regression_model, variable = "anxiety_level")
avPlot(regression_model, variable = "study_time")
avPlot(regression_model, variable = "lived_eng")
avPlot(regression_model, variable = "age")
avPlot(regression_model, variable = "anxiety_level")
avPlot(regression_model, variable = "study_time")
avPlot(regression_model, variable = "lived_eng")
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
regression_model
sumary(regression_model)
summary(regression_model)
vif(regression_model)
?outlierTest
outlierTest(regression_model)
summary(regression_model)
install.packages("lm.beta")
library(lm.beta)
coef.lm.beta(regression_model, standardized = FALSE)
coef.lm.beta(regression_model, standardized = TRUE)
coef.lm.beta(regression_model)
coef.lm.beta(regression_model, standardized = TRUE)
?coef
coef(regression_model)
scaled_model <- lm(scale(speaking_score) ~ scale(study_time) + scale(age) + scale(anxiety_level) +
scale(study_time) + scale(lived_eng), data = regression_data)
summary(scaled_model$coefficients)
summary(scaled_model)
coef(scaled_model)
regression_data
regression_data
regression_data <- read.xls(file.choose())
regression_data
regression_data <- read.xls(file.choose())
install.packages("MASS")
# install.packages("MASS")
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
regression_data <- read.xls(file.choose())
regression_data <- read.xls(file.choose())
regression_data
regression_model_1 <- lm(speaking_score ~ age + lived_eng, data = regression_data)
regression_model_2 <- lm(speaking_score ~ age + lived_eng + anxiety_level, data = regression_data)
regression_model_3 <- lm(speaking_score ~ age + lived_eng + anxiety_level + study_time, data = regression_data)
summary(regression_model_1)
summary(regression_model_2)
summary(regression_model_3)
str(regression_model_1)
summary(regression_model_1)
summary(regression_model_2)
summary(regression_model_3)
anova(regression_model_1, regression_model_2, regression_model_3)
scaled_model_1 <- lm(scale(speaking_score) ~ scale(age) + scale(lived_eng), data = regression_data)
scaled_model_2 <- lm(scale(speaking_score) ~ scale(age) + scale(anxiety_level) +
+ scale(lived_eng), data = regression_data)
scaled_model_3 <- lm(scale(speaking_score) ~ scale(study_time) + scale(age) + scale(anxiety_level) +
+ scale(lived_eng), data = regression_data)
coef(scaled_model_1)
coef(scaled_model_2)
coef(scaled_model_3)
# install.packages("MASS")
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
regression_data <- read.xls(file.choose())
regression_data
regression_model <- glm(pass_fail ~ speaking_score + age + lived_eng + study_time, data = regression_data)
summary(regression_model)
regression_model <- glm(pass_fail ~ speaking_score + age + lived_eng + study_time, data = regression_data, family = binomial)
summary(regression_model)
probabilities <- predict(regression_model, type = "response")
probabilities
predictions <- ifelse(probabilities > 0.5, "pass", "fail")
table(predictions, regression_data$pass_fail)
mean(predictions ==  Direction)
mean(predictions ==  regression_data$pass_fail)
percent_correct_pass = (16/(16+19))*100
percent_correct_pass
percent_correct_fail = (55/(55+10))*100
percent_correct_fail
percent_correct_total = (percent_correct_fail + percent_correct_pass)/2
percent_correct_total
percent_correct_total = (percent_correct_fail*65 + percent_correct_pass*35)/2
percent_correct_total
prop_correct_pass = 16/(16+19)
prop_correct_fail = 55/(55+10)
percent_correct_total = prop_correct_fail*65 + prop_correct_pass*35
percent_correct_total
# install.packages("MASS")
install.packages("rcompanion")
library(rcompanion)
nagelkerke(regression_model)
install.packages("rcompanion")
library(rcompanion)
nagelkerke(regression_model)
install.packages("ResourceSelection")
library(ResourceSelection)
hoslem.test(regression_data$pass_fail,fitted(regression_model))
summary(regression_model)
install.packages("survey")
library(survey)
?regTermTest
regTermTest(regression_model, "pass_fail")
regTermTest(fitted(regression_model), "pass_fail")
regression_model
regression_data
regTermTest(regression_model, regression_data$pass_fail)
regTermTest(regression_model, "pass_fail")
regTermTest(regression_model, ~age+study_time+lived_eng+speaking_score)
regTermTest(regression_model, ~age)
regTermTest(regression_model, ~age)
regTermTest(regression_model, ~study_time)
regTermTest(regression_model, ~lived_eng)
regTermTest(regression_model, ~speaking_score)
summary(regression_model)
exp(coef(regression_model))
exp(confint(regression_model))
exp(confint.default(regression_model))
