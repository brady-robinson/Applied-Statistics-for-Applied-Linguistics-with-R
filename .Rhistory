ggplot(c1_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
# Load packages
library(gdata)
library(dplyr)
library(reshape2)
library(ggplot2)
library(pastecs)
library(mvnormtest)
library(assertr)
library(stats)
library(heplots)
library(car)
manova_data <- read.xls(file.choose())
manova_data
columns_to_keep <- c("School", "Speaking_Score", "Writing_Score")
manova_data <- manova_data[columns_to_keep]
manova_data
manova_data$School<-factor(manova_data$School, levels = c(1, 2, 3), labels = c("on_site", "online", "hybrid"))
str(manova_data)
manova_data
# First we need to restructure the data into long format:
manova_data_melt <- melt(manova_data, id=c('School'), measured=c('Speaking_Score', 'Writing_Score'))
names(manova_data_melt) <- c('School', 'Outcome_Measure', 'Score')
# plot
box_plot <- ggplot(manova_data_melt, aes(School, Score, color = Outcome_Measure))
box_plot + geom_boxplot() + labs(x='School Type', y='Speaking/Writing Scores', color='Outcome_Measure') + scale_y_continuous(breaks=seq(0,100, by=5))
by(manova_data$Speaking_Score, manova_data$School, stat.desc, basic=F)
by(manova_data$Writing_Score, manova_data$School, stat.desc, basic=F)
# Running the MANOVA test
residuals_manova <- manova(cbind(Speaking_Score, Writing_Score) ~ School,
data = manova_data)
summary(residuals_manova, test="Wilks")
summary.aov(residuals_manova)
# Univariate normality
c1_subset <- subset(manova_data, School == "on_site")
c1_subset
c2_subset <- subset(manova_data, School == "online")
c2_subset
c3_subset <- subset(manova_data, School == "hybrid")
c3_subset
shapiro.test(x = c1_subset$Speaking_Score)
shapiro.test(x = c1_subset$Writing_Score)
shapiro.test(x = c2_subset$Speaking_Score)
shapiro.test(x = c2_subset$Writing_Score)
shapiro.test(x = c3_subset$Speaking_Score)
shapiro.test(x = c3_subset$Writing_Score)
dim(c1_subset)
dim(c2_subset)
dim(c3_subset)
output_boxm <- boxM(manova_data[,2:3], manova_data[,1])
summary(output_boxm)
# Levene's test for homogeneirty of variance
leveneTest(manova_data$Speaking_Score, manova_data$School, center = mean)
leveneTest(manova_data$Writing_Score, manova_data$School, center = mean)
corr_output <- cor.test(manova_data$Speaking_Score, manova_data$Writing_Score, method = "pearson")
corr_output
ggplot(c1_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
ggplot(c2_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
ggplot(c3_subset, aes(Speaking_Score, Writing_Score)) + geom_point()
cols_for_maha <- c("Speaking_Score", "Writing_Score")
data_for_maha <- manova_data[cols_for_maha]
data_for_maha
sort(maha_dist(data_for_maha))
means <- colMeans(data_for_maha)
covx <- cov(data_for_maha)
maha_values <- mahalanobis(data_for_maha,means, covx)
sort(maha_values)
bound_outcomes <- cbind(manova_data$Speaking_Score, manova_data$Writing_Score)
manova_model <- manova(bound_outcomes ~ School, data = manova_data)
summary(manova_model, intercept = TRUE) # default Pillai test
summary(manova_model, intercept = TRUE, test = "Wilks")
speaking_model <- lm(Speaking_Score ~ School, data=manova_data)
summary.aov(manova_model)
speaking_model <- lm(Speaking_Score ~ School, data=manova_data)
writing_model <- lm(Writing_Score ~ School, data=manova_data)
summary.lm(speaking_model)
summary.lm(writing_model)
# install.packages("multcomp")
library(multcomp)
post_hocs_speaking <- glht(speaking_model, linfct = mcp(School = "Tukey"))
post_hocs_writing <- glht(writing_model, linfct = mcp(School = "Tukey"))
summary(post_hocs_speaking)
summary(post_hocs_writing)
#install.packages("lsr")
library(lsr)
effect_size_speaking <- etaSquared(speaking_model)
effect_size_writing <- etaSquared(writing_model)
#effect_size_manova <- etaSquared(manova_model) #Unknown
eff_size_speaking <- effect_size_speaking[,1]
#effect_size_manova <- etaSquared(manova_model) #Unknown
eff_size_speaking <- effect_size_speaking[,1]
eff_size_writing <- effect_size_writing[,1]
eff_size_speaking
eff_size_writing
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
regression_data <- read.xls(file.choose())
regression_data
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm, se = FALSE)
outlierTest(regression_model)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model
regression_model$residuals
outlierTest(regression_model)
regression_data <- regression_data[-c(91),]
regression_data
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm, se = FALSE)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model
regression_model$residuals
predicted_values <- predict(regression_model)
residual_values <- regression_model$residuals
ggplot(regression_model, aes(predicted_values, residual_values)) + geom_point()
durbinWatsonTest(regression_model)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.1)
qqPlot(regression_model$residuals)
ggplot(regression_model, aes(predicted_values, residual_values)) + geom_point()
summary(regression_model)
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
regression_data <- read.xls(file.choose())
regression_data
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm, se = FALSE)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model
outlierTest(regression_model)
regression_data <- regression_data[-c(91),]
regression_data
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point()
ggplot(regression_data, aes(study_time, speaking_score)) + geom_point() + stat_smooth(method = lm, se = FALSE)
regression_model <- lm(speaking_score ~ study_time, data = regression_data)
summary(regression_model)
regression_model
durbinWatsonTest(regression_model)
predicted_values <- predict(regression_model)
residual_values <- regression_model$residuals
ggplot(regression_model, aes(predicted_values, residual_values)) + geom_point()
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram(binwidth = 0.1)
qqPlot(regression_model$residuals)
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
regression_data <- read.xls(file.choose())
regression_model <- lm(speaking_score ~ study_time + age + anxiety_level +
study_time + lived_eng, data = regression_data)
summary(regression_model)
outlierTest(regression_model)
scaled_model <- lm(scale(speaking_score) ~ scale(study_time) + scale(age) + scale(anxiety_level) +
scale(study_time) + scale(lived_eng), data = regression_data)
coef(scaled_model)
influence(regression_model)
durbinWatsonTest(regression_model)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram()
qqPlot(regression_model$residuals)
sresid <- studres(regression_model)
predicted_values <- predict(regression_model)
frame_for_plot <- as.data.frame(cbind(sresid, predicted_values))
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
avPlot(regression_model, variable = "age")
avPlot(regression_model, variable = "anxiety_level")
avPlot(regression_model, variable = "study_time")
avPlot(regression_model, variable = "lived_eng")
vif(regression_model)
summary(regression_model)
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
avPlot(regression_model, variable = "age")
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point() # Homoscedasticity
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
regression_data <- read.xls(file.choose())
regression_data
regression_model <- lm(speaking_score ~ study_time + age + anxiety_level +
study_time + lived_eng, data = regression_data)
summary(regression_model)
outlierTest(regression_model)
scaled_model <- lm(scale(speaking_score) ~ scale(study_time) + scale(age) + scale(anxiety_level) +
scale(study_time) + scale(lived_eng), data = regression_data)
coef(scaled_model)
influence(regression_model)
durbinWatsonTest(regression_model)
ggplot(regression_model, aes(regression_model$residuals)) + geom_histogram()
qqPlot(regression_model$residuals)
sresid <- studres(regression_model)
predicted_values <- predict(regression_model)
frame_for_plot <- as.data.frame(cbind(sresid, predicted_values))
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point() # Homoscedasticity
avPlot(regression_model, variable = "age")
avPlot(regression_model, variable = "anxiety_level")
avPlot(regression_model, variable = "study_time")
avPlot(regression_model, variable = "lived_eng")
vif(regression_model)
summary(regression_model)
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
regression_data <- read.xls(file.choose())
regression_data
regression_model_1 <- lm(speaking_score ~ age + lived_eng, data = regression_data)
regression_model_2 <- lm(speaking_score ~ age + lived_eng + anxiety_level, data = regression_data)
regression_model_3 <- lm(speaking_score ~ age + lived_eng + anxiety_level + study_time, data = regression_data)
summary(regression_model_1)
summary(regression_model_2)
summary(regression_model_3)
anova(regression_model_1, regression_model_2, regression_model_3)
summary(regression_model_3)
scaled_model_1 <- lm(scale(speaking_score) ~ scale(age) + scale(lived_eng), data = regression_data)
scaled_model_2 <- lm(scale(speaking_score) ~ scale(age) + scale(anxiety_level) +
+ scale(lived_eng), data = regression_data)
scaled_model_3 <- lm(scale(speaking_score) ~ scale(study_time) + scale(age) + scale(anxiety_level) +
+ scale(lived_eng), data = regression_data)
coef(scaled_model_1)
coef(scaled_model_2)
coef(scaled_model_3)
influence(regression_model_3)
durbinWatsonTest(regression_model_3)
ggplot(regression_model_3, aes(regression_model_3$residuals)) + geom_histogram()
qqPlot(regression_model_3$residuals)
sresid <- studres(regression_model_3)
predicted_values <- predict(regression_model_3)
frame_for_plot <- as.data.frame(cbind(sresid, predicted_values))
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
avPlot(regression_model_3, variable = "age")
avPlot(regression_model_3, variable = "anxiety_level")
avPlot(regression_model_3, variable = "study_time")
avPlot(regression_model_3, variable = "lived_eng")
vif(regression_model_3)
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
regression_data <- read.xls(file.choose())
regression_data
regression_data
regression_model_1 <- lm(speaking_score ~ age + lived_eng, data = regression_data)
regression_model_2 <- lm(speaking_score ~ age + lived_eng + anxiety_level, data = regression_data)
regression_model_3 <- lm(speaking_score ~ age + lived_eng + anxiety_level + study_time, data = regression_data)
summary(regression_model_1)
summary(regression_model_2)
summary(regression_model_3)
anova(regression_model_1, regression_model_2, regression_model_3)
outlierTest(regression_model_3)
scaled_model_1 <- lm(scale(speaking_score) ~ scale(age) + scale(lived_eng), data = regression_data)
scaled_model_2 <- lm(scale(speaking_score) ~ scale(age) + scale(anxiety_level) +
+ scale(lived_eng), data = regression_data)
scaled_model_3 <- lm(scale(speaking_score) ~ scale(study_time) + scale(age) + scale(anxiety_level) +
+ scale(lived_eng), data = regression_data)
coef(scaled_model_1)
coef(scaled_model_2)
coef(scaled_model_3)
influence(regression_model_3)
durbinWatsonTest(regression_model_3)
ggplot(regression_model_3, aes(regression_model_3$residuals)) + geom_histogram()
qqPlot(regression_model_3$residuals)
sresid <- studres(regression_model_3)
predicted_values <- predict(regression_model_3)
frame_for_plot <- as.data.frame(cbind(sresid, predicted_values))
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
avPlot(regression_model_3, variable = "age")
avPlot(regression_model_3, variable = "anxiety_level")
avPlot(regression_model_3, variable = "study_time")
avPlot(regression_model_3, variable = "lived_eng")
vif(regression_model_3)
ggplot(frame_for_plot, aes(sresid, predicted_values)) + geom_point()
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
library(rcompanion)
library(ResourceSelection)
library(survey)
regression_data <- read.xls(file.choose())
regression_data
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
library(rcompanion)
library(ResourceSelection)
library(survey)
regression_data <- read.xls(file.choose())
regression_data
regression_model <- glm(pass_fail ~ speaking_score + age + lived_eng + study_time, data = regression_data, family = binomial)
summary(regression_model)
probabilities <- predict(regression_model, type = "response")
predictions <- ifelse(probabilities > 0.5, "pass", "fail")
table(predictions, regression_data$pass_fail)
prop_correct_pass = 16/(16+19) # number classified as pass divided by total number pass
prop_correct_fail = 55/(55+10) # number classified as fail divided by total number fail
percent_correct_total = prop_correct_fail*65 + prop_correct_pass*35 # raw numbers represent total fail and total pass
percent_correct_total
regTermTest(regression_model, ~age)
regTermTest(regression_model, ~study_time)
regTermTest(regression_model, ~lived_eng)
regTermTest(regression_model, ~speaking_score)
exp(coef(regression_model))
exp(confint.default(regression_model))
nagelkerke(regression_model)
hoslem.test(regression_data$pass_fail,fitted(regression_model))
library(gdata)
library(ggplot2)
library(dplyr)
library(car)
library(MASS)
library(rcompanion)
library(ResourceSelection)
library(survey)
regression_data <- read.xls(file.choose())
regression_data
regression_model <- glm(pass_fail ~ speaking_score + age + lived_eng + study_time, data = regression_data, family = binomial)
summary(regression_model)
probabilities <- predict(regression_model, type = "response")
probabilities
predictions <- ifelse(probabilities > 0.5, "pass", "fail")
predictions
table(predictions, regression_data$pass_fail)
regression_data
table(predictions, regression_data$pass_fail)
prop_correct_pass = 16/(16+19) # number classified as pass divided by total number pass
prop_correct_fail = 55/(55+10) # number classified as fail divided by total number fail
percent_correct_total = prop_correct_fail*65 + prop_correct_pass*35 # raw numbers represent total fail and total pass
percent_correct_total
prop_correct_pass
prop_correct_fail
regTermTest(regression_model, ~age)
regTermTest(regression_model, ~study_time)
regTermTest(regression_model, ~lived_eng)
regTermTest(regression_model, ~speaking_score)
exp(coef(regression_model))
exp(confint.default(regression_model))
nagelkerke(regression_model)
hoslem.test(regression_data$pass_fail,fitted(regression_model))
test_data <- read.xls(file.choose())
library(gdata)
library(fBasics)
library(DescTools)
library(e1071)
test_data <- read.xls(file.choose())
test_data
basicStats(test_data$total_multiple_choice) # do not use skewness and kurtosis from this package
Mode(test_data$total_multiple_choice)
skewness(test_data$total_multiple_choice, type = 2) # use type 2 skewness and kurtosis from package e1071
kurtosis(test_data$total_multiple_choice, type = 2) # use type 2 skewness and kurtosis from package e1071
test_data <- read.xls(file.choose())
basicStats(test_data$total.multiple.choice) # do not use skewness and kurtosis from this package
basicStats(test_data$total.multiple.choice) # do not use skewness and kurtosis from this package
Mode(test_data$total.multiple.choice)
skewness(test_data$total.multiple.choice, type = 2) # use type 2 skewness and kurtosis from package e1071
kurtosis(test_data$total.multiple.choice, type = 2) # use type 2 skewness and kurtosis from package e1071
basicStats(test_data$speaking_average) # do not use skewness and kurtosis from this package
Mode(test_data$speaking_average)
kurtosis(test_data$speaking_average, type = 2) # use type 2 skewness and kurtosis from package e1071
skewness(test_data$speaking_average, type = 2) # use type 2 skewness and kurtosis from package e1071
hist(test_data$total.multiple.choice, breaks = 6, main = "Histogram of Total Multiple Choice Scores",
xlab = "Number Correct", ylab = "Frequency")
hist(test_data$speaking_average, breaks = 6, main = "Histogram of Average Speaking Scores",
xlab = "Speaking Score", ylab = "Frequency")
library(gdata)
library(fBasics)
library(DescTools)
library(e1071)
test_data <- read.xls(file.choose())
test_data
basicStats(test_data$total.multiple.choice) # do not use skewness and kurtosis from this package
Mode(test_data$total.multiple.choice)
skewness(test_data$total.multiple.choice, type = 2) # use type 2 skewness and kurtosis from package e1071
kurtosis(test_data$total.multiple.choice, type = 2) # use type 2 skewness and kurtosis from package e1071
basicStats(test_data$speaking_average) # do not use skewness and kurtosis from this package
Mode(test_data$speaking_average)
kurtosis(test_data$speaking_average, type = 2) # use type 2 skewness and kurtosis from package e1071
skewness(test_data$speaking_average, type = 2) # use type 2 skewness and kurtosis from package e1071
hist(test_data$total.multiple.choice, breaks = 6, main = "Histogram of Total Multiple Choice Scores",
xlab = "Number Correct", ylab = "Frequency")
hist(test_data$speaking_average, breaks = 6, main = "Histogram of Average Speaking Scores",
xlab = "Speaking Score", ylab = "Frequency")
library(gdata)
library(fBasics)
library(DescTools)
test_data <- read.xls(file.choose())
test_data
cron_alpha <- CronbachAlpha(test_data[,5:19])
cron_alpha
basicStats(test_data$total_multiple_choice)
basicStats(test_data$total.multiple.choice)
st_dev <- basicStats(test_data$total.multiple.choice)[14,]
st_dev
# standard_error_measurement = Standard_deviation*sqrt(1 - Cronbach's_alpha)
standard_error_measurement = st_dev*sqrt(1 - cron_alpha)
standard_error_measurement
library(gdata)
library(psych)
library(CTT)
library(DescTools)
test_data <- read.xls(file.choose())
CronbachAlpha(test_data[,5:19])
alpha(test_data[,5:19])
item_facility <- colMeans(test_data[,5:19], na.rm=TRUE)
item_facility
data(CTTdata)
data(CTTkey)
CTTdata
CTTkey
distractorAnalysis(CTTdata, CTTkey)
library(gdata)
library(psych)
library(CTT)
library(DescTools)
test_data <- read.xls(file.choose())
test_data
CronbachAlpha(test_data[,5:19])
alpha(test_data[,5:19])
CronbachAlpha(test_data[,5:19])
item_facility <- colMeans(test_data[,5:19], na.rm=TRUE)
item_facility
data(CTTdata)
data(CTTkey)
CTTdata
CTTkey
distractorAnalysis(CTTdata, CTTkey)
library(gdata)
library(Hmisc)
test_data <- read.xls(file.choose())
test_data
rcorr(as.matrix(test_data[,45:49]), type = c("spearman"))
rcorr(as.matrix(cbind(test_data$total.multiple.choice,
test_data$speaking_average)),
type = c("pearson"))
